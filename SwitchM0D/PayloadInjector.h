#ifndef _PAYLOADINJECTOR_H_
#define _PAYLOADINJECTOR_H_

#include <Usb.h>

#define INTERMEZZO_SIZE 92
const byte intermezzo[INTERMEZZO_SIZE] =
{
  0x44, 0x00, 0x9F, 0xE5, 0x01, 0x11, 0xA0, 0xE3, 0x40, 0x20, 0x9F, 0xE5, 0x00, 0x20, 0x42, 0xE0,
  0x08, 0x00, 0x00, 0xEB, 0x01, 0x01, 0xA0, 0xE3, 0x10, 0xFF, 0x2F, 0xE1, 0x00, 0x00, 0xA0, 0xE1,
  0x2C, 0x00, 0x9F, 0xE5, 0x2C, 0x10, 0x9F, 0xE5, 0x02, 0x28, 0xA0, 0xE3, 0x01, 0x00, 0x00, 0xEB,
  0x20, 0x00, 0x9F, 0xE5, 0x10, 0xFF, 0x2F, 0xE1, 0x04, 0x30, 0x90, 0xE4, 0x04, 0x30, 0x81, 0xE4,
  0x04, 0x20, 0x52, 0xE2, 0xFB, 0xFF, 0xFF, 0x1A, 0x1E, 0xFF, 0x2F, 0xE1, 0x20, 0xF0, 0x01, 0x40,
  0x5C, 0xF0, 0x01, 0x40, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x01, 0x40,
};

#define PACKET_CHUNK_SIZE 0x1000

class PayloadInjector {
 public:
	PayloadInjector(const byte *payload, uint32_t payloadLength);
	~PayloadInjector();
  int injectPayload();
  static USBHost usb;
  static bool foundTegra;
  static byte tegraDeviceAddress;
  
 private:
  void usbOutTransferChunk(uint32_t addr, uint32_t ep, uint32_t nbytes, uint8_t* data);
  void usbFlushBuffer();
  void usbBufferedWrite(const byte *data, uint32_t length);
  void usbBufferedWriteU32(uint32_t data);
  void readTegraDeviceID(byte *deviceID);
  void sendPayload(const byte *payload, uint32_t payloadLength);
  static void findTegraDevice(UsbDeviceDefinition *pdev);
  void setupTegraDevice();
	EpInfo epInfo[3];
	byte usbWriteBuffer[PACKET_CHUNK_SIZE];
	uint32_t usbWriteBufferUsed;
	uint32_t packetsWritten;
	unsigned long lastCheckTime;
	const byte *m_payload; 
	uint32_t m_payloadLength;
};
#endif // _PAYLOADINJECTOR_H_
